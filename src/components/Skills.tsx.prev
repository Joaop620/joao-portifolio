import { useRef } from 'react'
import { useTranslation } from 'react-i18next'
import { motion, useInView, useScroll, useTransform } from 'framer-motion'

// Simple brand-like glyphs (not official logos)
function SkillIcon({ name }:{ name:string }){
  const key = name.toLowerCase()
  const size = 44
  if(key.includes('react')){
    return (
      <svg width={size} height={size} viewBox="0 0 100 100" role="img" aria-label="React">
        <circle cx="50" cy="50" r="8" />
        <ellipse cx="50" cy="50" rx="34" ry="14" fill="none" stroke="currentColor" strokeWidth="6"/>
        <ellipse cx="50" cy="50" rx="34" ry="14" transform="rotate(60 50 50)" fill="none" stroke="currentColor" strokeWidth="6"/>
        <ellipse cx="50" cy="50" rx="34" ry="14" transform="rotate(-60 50 50)" fill="none" stroke="currentColor" strokeWidth="6"/>
      </svg>
    )
  }
  if(key.includes('javascript') || key === 'js'){
    return (
      <svg width={size} height={size} viewBox="0 0 100 100" role="img" aria-label="JavaScript">
        <rect x="10" y="10" width="80" height="80" rx="8"/>
        <text x="50" y="65" fontSize="48" textAnchor="middle" fill="white" fontWeight="700">JS</text>
      </svg>
    )
  }
  if(key.includes('html')){
    return (
      <svg width={size} height={size} viewBox="0 0 100 100" role="img" aria-label="HTML5">
        <path d="M20 10h60l-6 68-24 12-24-12L20 10z"/>
        <text x="50" y="62" fontSize="36" textAnchor="middle" fill="white" fontWeight="700">5</text>
      </svg>
    )
  }
  if(key.includes('css')){
    return (
      <svg width={size} height={size} viewBox="0 0 100 100" role="img" aria-label="CSS3">
        <path d="M20 10h60l-6 68-24 12-24-12L20 10z"/>
        <text x="50" y="62" fontSize="36" textAnchor="middle" fill="white" fontWeight="700">3</text>
      </svg>
    )
  }
  if(key.includes('typescript') || key === 'ts'){
    return (
      <svg width={size} height={size} viewBox="0 0 100 100" role="img" aria-label="TypeScript">
        <rect x="10" y="10" width="80" height="80" rx="8"/>
        <text x="50" y="65" fontSize="44" textAnchor="middle" fill="white" fontWeight="700">TS</text>
      </svg>
    )
  }
  if(key.includes('git')){
    return (
      <svg width={size} height={size} viewBox="0 0 100 100" role="img" aria-label="Git">
        <rect x="10" y="10" width="80" height="80" rx="12"/>
        <circle cx="38" cy="38" r="8" fill="white"/>
        <circle cx="62" cy="62" r="8" fill="white"/>
        <circle cx="62" cy="38" r="8" fill="white"/>
        <path d="M38 38 L62 62 M38 38 L62 38" stroke="white" strokeWidth="6"/>
      </svg>
    )
  }
  if(key.includes('node')){
    return (
      <svg width={size} height={size} viewBox="0 0 100 100" role="img" aria-label="Node.js">
        <polygon points="50,8 90,30 90,70 50,92 10,70 10,30"/>
        <text x="50" y="64" fontSize="34" textAnchor="middle" fill="white" fontWeight="700">Node</text>
      </svg>
    )
  }
  // Fallback badge
  return (
    <svg width={size} height={size} viewBox="0 0 100 100" role="img" aria-label={name}>
      <rect x="10" y="10" width="80" height="80" rx="12"/>
      <text x="50" y="62" fontSize="28" textAnchor="middle" fill="white" fontWeight="700">
        {name.slice(0,3).toUpperCase()}
      </text>
    </svg>
  )
}

export default function Skills(){
  const { t } = useTranslation()

  const secRef = useRef<HTMLDivElement>(null)
  const { scrollYProgress } = useScroll({ target: secRef, offset: ['start end','end start'] })
  const yTitle = useTransform(scrollYProgress, [0,1], [20,-20])
  const oTitle = useTransform(scrollYProgress, [0,.2,.8,1], [.75,1,1,.9])

  const ref = useRef<HTMLDivElement>(null)
  const inView = useInView(ref, { amount: 0.2, once: true })

  // Pull items from i18n; ignore the numeric percentages
  const bars = t('skills.bars', { returnObjects:true }) as any[]
  const names = bars.map(b => b.t as string)

  return (
    <section ref={secRef} id="skills" className="py-24 md:py-28">
      <motion.h2 style={{ y:yTitle, opacity:oTitle }} className="text-3xl md:text-4xl font-extrabold text-center mb-12">
        {t('skills.title')}
      </motion.h2>

      <div ref={ref} className="container mx-auto px-6">
        <motion.ul
          initial={{ opacity: 0, y: 20 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.6, ease: 'easeOut' }}
          className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-6 md:gap-8 place-items-center"
        >
          {names.map((name:string, i:number) => (
            <li key={i} className="flex flex-col items-center gap-3">
              <div className="rounded-2xl p-4 shadow-sm ring-1 ring-black/5 dark:ring-white/10 bg-white dark:bg-zinc-900">
                <div className="w-12 h-12 md:w-14 md:h-14 text-black dark:text-white">
                  <SkillIcon name={name} />
                </div>
              </div>
              <span className="text-sm md:text-base font-medium text-center">{name}</span>
            </li>
          ))}
        </motion.ul>

        {/* Optional tools row stays as simple badges */}
        <div className="mt-10 flex flex-wrap items-center justify-center gap-2">
          {(t('skills.tools', { returnObjects:true }) as string[]).map((tool, idx) => (
            <span
              key={idx}
              className="text-xs md:text-sm px-3 py-1 rounded-full bg-black/5 dark:bg-white/10"
            >
              {tool}
            </span>
          ))}
        </div>
      </div>
    </section>
  )
}
